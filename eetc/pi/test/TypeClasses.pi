module TypeClasses where

data TypeClassT (T : Type -> Type) (A : Type): Type where
  TypeClassC of (T A)

detc : (T : Type -> Type) -> (A : Type) -> TypeClassT T A -> T A
detc = \T A t .
  case t of
    TypeClassC a -> a

data InstanceT (T : Type -> Type) (A : Type) : Type where
  InstanceC of (TypeClassT T A)

deinst : (T : Type -> Type) -> (A : Type) -> (InstanceT T A) -> TypeClassT T A
deinst = \T A i.
  case i of
    InstanceC t -> t

data PlusOperation (A : Type) : Type where
  Plus of (A -> A -> A)

deplus : (A : Type) -> PlusOperation A -> A -> A -> A
deplus = \A P. case P of
  Plus p -> p

PlusOperation' : Type -> Type
PlusOperation' = \A. PlusOperation A

plus : (A : Type) -> InstanceT PlusOperation' A -> A -> A -> A
plus = \A i a b. deplus A (detc PlusOperation' A (deinst PlusOperation' A i)) a b

orb : Bool -> Bool -> Bool
orb = \b1 b2.
  case b1 of
    True -> True
    False -> b1

boolPlus : Bool -> Bool -> Bool
boolPlus = orb

boolPlusInstance : InstanceT (PlusOperation') (Bool)
boolPlusInstance = InstanceC (TypeClassC (Plus boolPlus))

two : Bool
two = plus Bool boolPlusInstance True False
