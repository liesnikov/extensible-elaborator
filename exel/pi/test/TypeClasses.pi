module TypeClasses where

data TypeClassT (T : Type -> Type) (A : Type): Type where
  TypeClassC of (T A)

detc : (T : Type -> Type) -> (A : Type) -> TypeClassT T A -> T A
detc = \T A t .
  case t of
    TypeClassC a -> a

data InstanceT (T : Type -> Type) (A : Type) : Type where
  InstanceC of (TypeClassT T A)

deinst : (T : Type -> Type) -> (A : Type) -> (InstanceT T A) -> TypeClassT T A
deinst = \T A i.
  case i of
    InstanceC t -> t
