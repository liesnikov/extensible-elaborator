module BoolPlusTypeClass where

-- copy of TypeClasses.pi: imports don't work in these tests, so this is a crutch

data TypeClassT (T : Type -> Type) (A : Type): Type where
  TypeClassC of (T A)

detc : (T : Type -> Type) -> (A : Type) -> TypeClassT T A -> T A
detc = \T A t .
  case t of
    TypeClassC a -> a

data InstanceT (T : Type -> Type) (A : Type) : Type where
  InstanceC of (TypeClassT T A)

deinst : (T : Type -> Type) -> (A : Type) -> (InstanceT T A) -> TypeClassT T A
deinst = \T A i.
  case i of
    InstanceC t -> t

-- end of TypeClasses.pi

data PlusOperation (A : Type) : Type where
  Plus of (A -> A -> A)

deplus : (A : Type) -> PlusOperation A -> A -> A -> A
deplus = \A P. case P of
  Plus p -> p

PlusOperation' : Type -> Type
PlusOperation' = \A. PlusOperation A

plus : (A : Type) -> InstanceT PlusOperation' A -> A -> A -> A
plus = \A i a b. deplus A (detc PlusOperation' A (deinst PlusOperation' A i)) a b

orb : Bool -> Bool -> Bool
orb = \b1 b2.
  case b1 of
    True -> True
    False -> b1

boolPlus : Bool -> Bool -> Bool
boolPlus = orb

instanceBoolPlus : InstanceT PlusOperation' Bool
instanceBoolPlus = InstanceC (TypeClassC (Plus boolPlus))

twoManual : Bool
twoManual = plus Bool instanceBoolPlus True False

two : Bool
two = plus _ _ True False