module Equality where
-- Defining propositional equality as an indexed datatype

data Eq (A : Type) (a : A) (b : A) : Type where
  EqRefl of [a = b]

j : [A : Type] -> [a1 : A] -> [a2 : A]
  -> (a : Eq A a1 a2)
  -> [B : ((x:A) -> (Eq A x a2) -> Type)]
  -> (b : B a2 EqRefl)
  -> B a1 a
j = \[A] [a1] [a2] a [B] b .
   case a of
      EqRefl -> b

sym : [A:Type] -> [x:A] -> [y:A] -> (Eq A x y) -> Eq A y x
sym = \ [A] [x][y] pf .
  case pf of
     EqRefl -> EqRefl

trans : [A:Type] -> [x:A] -> [y:A] -> [z:A] -> (Eq A x z) -> (Eq A z y) -> (Eq A x y)
trans = \[A][x][y][z] pf1 pf2 .
  case pf2 of
    EqRefl -> pf1