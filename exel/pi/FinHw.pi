-- PI library for finite numbers: HW exercise
--
-- How many Nat arguments can be declared irrelevant?
-- See: Fin.pi for a solution.
module Fin where

import Nat

data Fin (n : Nat) : Type where
  Zero of (m:Nat)[n = Succ m]             -- modify (m:Nat) to [m:Nat]
  Succ of (m:Nat)[n = Succ m] (Fin m)     -- modify (m:Nat) to [m:Nat]

-- Modifying data declaration above will require updates to the code below.

x0 : Fin 1
x0 = Zero 0

x1 : Fin 2
x1 = Zero 1

x2 : Fin 3
x2 = Succ 2 (Zero 1)

toNat : (n : Nat) -> Fin n -> Nat
toNat = \ n  fn .
  case fn of
   Zero m    -> 0
   Succ m  i -> plus 1 (toNat m  i)

raise : (m : Nat) -> (n: Nat) -> Fin m -> Fin (plus n m)
raise = TRUSTME

inject_1 : (m : Nat) -> Fin m -> Fin (Succ m)
inject_1 = \m f . Succ m  f

inject : (m:Nat) -> (n:Nat) -> Fin m -> Fin (plus m n)
inject = TRUSTME


fpred : (n : Nat) -> Fin n -> Fin n
fpred = \ n  fn .
  case fn of
    Zero m -> Zero m
    (Succ m i) -> inject_1 m  i

-- Compare for equality

fin_eq : (n: Nat) -> (Fin n) -> (Fin n) -> Bool
fin_eq = \ n fn1 fn2 .
   case fn1 of
      Zero m1  ->
         case fn2 of
            Zero m2       -> True
            Succ m2  x    -> False
      Succ m1  fn1' ->
         case fn2 of
            Succ m2  fn2' ->  fin_eq m1  fn1' fn2'
            Zero m2  -> False

